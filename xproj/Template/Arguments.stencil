// MARK: - ArgumentType for Enums
{% for type in types.implementing.ArgumentType|enum %}

// MARK: - {{ type.name }} ArgumentType
extension {{ type.name }} {
    var longValue: String {
        switch self {
        {% for case in type.cases %}
        {% if case.hasAssociatedValue %}case .{{ case.name }}(let data):{% else %}case .{{ case.name }}:{% endif %}
            {% ifnot case.hasAssociatedValue %}
            return "--{{ case.name }}"
            {% else %}
            {% if case.associatedValues.count == 1 %}
            return combineHashes([{{ forloop.counter }}, data.hashValue])
            {% else %}
            return combineHashes([{{ forloop.counter }}, {% for associated in case.associatedValues %}data.{{ associated.externalName }}.hashValue{% if not forloop.last %}, {% endif %}{% endfor %}{% for variable in type.computedVariables %}{% if variable.annotations.includeInHashing %}, {{ variable.name }}.hashValue{% endif %}{% endfor %}])
            {% endif %}
            {% endif %}
            {% endfor %}
        }
    }

    var shortValue: String {
        switch self {
        {% for case in type.cases %}
        {% if case.hasAssociatedValue %}case .{{ case.name }}(let data):{% else %}case .{{ case.name }}:{% endif %}
            {% ifnot case.hasAssociatedValue %}
            return "--{{ case.name }}"
            {% else %}
            {% if case.associatedValues.count == 1 %}
            return combineHashes([{{ forloop.counter }}, data.hashValue])
            {% else %}
            return combineHashes([{{ forloop.counter }}, {% for associated in case.associatedValues %}data.{{ associated.externalName }}.hashValue{% if not forloop.last %}, {% endif %}{% endfor %}{% for variable in type.computedVariables %}{% if variable.annotations.includeInHashing %}, {{ variable.name }}.hashValue{% endif %}{% endfor %}])
            {% endif %}
            {% endif %}
            {% endfor %}
        }
    }
}
{% endfor %}